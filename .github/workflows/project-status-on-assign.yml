name: Project status → In Progress on assign

on:
  issues:
    types: [assigned]

permissions:
  contents: read
  issues: write

jobs:
  move-to-in-progress:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        env:
          ORG: sussex-ase-group-3
          PROJECT_NUMBER: 1
          STATUS_NAME: In Progress   # change to "Todo" if you prefer assignment ⇒ Todo
        with:
          script: |
            const { ORG, PROJECT_NUMBER, STATUS_NAME } = process.env;

            core.info(`Org: ${ORG}, Project: ${PROJECT_NUMBER}, Target status: ${STATUS_NAME}`);

            // Basic event sanity check
            if (context.payload.action !== 'assigned') {
              core.setFailed(`Unexpected issues action: ${context.payload.action}`);
            }
            const issue = context.payload.issue;
            if (!issue?.node_id) core.setFailed("No issue node_id found on payload");

            const org = ORG;
            const number = parseInt(PROJECT_NUMBER, 10);
            const statusName = STATUS_NAME;
            const issueNodeId = issue.node_id;

            // Get project and Status field/option
            const projRes = await github.graphql(
              `
              query($org:String!,$num:Int!){
                organization(login:$org){
                  projectV2(number:$num){
                    id
                    number
                    fields(first:50){
                      nodes{
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options { id name }
                        }
                      }
                    }
                  }
                }
              }
            `,
              { org, num: number }
            );

            const project = projRes?.organization?.projectV2;
            if (!project?.id) core.setFailed(`ProjectV2 #${number} not found in org ${org}`);

            const statusField = project.fields.nodes.find(f => f?.name === "Status");
            if (!statusField) core.setFailed('Status field not found on project');

            const statusOption = statusField.options.find(o => o.name === statusName);
            if (!statusOption) core.setFailed(`Status option "${statusName}" not found on project`);

            // Ensure the issue is on the project (idempotent)
            let addItemRes = null;
            try {
              addItemRes = await github.graphql(
                `
                mutation($projectId:ID!,$contentId:ID!){
                  addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}){
                    item { id }
                  }
                }
              `,
                { projectId: project.id, contentId: issueNodeId }
              );
            } catch (e) {
              core.info("Item likely already on project (addProjectV2ItemById failed). Will locate existing item.");
            }

            // Prefer resolving via the issue's projectItems to avoid scanning the project
            let itemId = addItemRes?.addProjectV2ItemById?.item?.id;
            if (!itemId) {
              const issueProjItems = await github.graphql(
                `
                query($issueId:ID!){
                  node(id:$issueId){
                    ... on Issue {
                      projectItems(first:50){
                        nodes { id project { number } }
                      }
                    }
                  }
                }
              `,
                { issueId: issueNodeId }
              );
              const nodes = issueProjItems?.node?.projectItems?.nodes ?? [];
              const matching = nodes.find(n => n?.project?.number === number);
              if (!matching?.id) core.setFailed(`Could not locate a ProjectV2 item for this issue in project #${number}`);
              itemId = matching.id;
            }

            // Update Status field
            await github.graphql(
              `
              mutation($projectId:ID!,$itemId:ID!,$fieldId:ID!,$optionId:String!){
                updateProjectV2ItemFieldValue(input:{
                  projectId:$projectId,
                  itemId:$itemId,
                  fieldId:$fieldId,
                  value:{ singleSelectOptionId:$optionId }
                }){
                  projectV2Item { id }
                }
              }
            `,
              { projectId: project.id, itemId, fieldId: statusField.id, optionId: statusOption.id }
            );

            core.info(`Moved issue #${issue.number} → "${statusName}"`);
